# This GitHub workflow config has been generated by a script via
#
#   haskell-ci '--output=.github/workflows/haskell-ci.yml' '--config=cabal.haskell-ci' 'cabal.project'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.11.20201215
#
# REGENDATA ("0.11.20201215",["--output=.github/workflows/haskell-ci.yml","--config=cabal.haskell-ci","cabal.project"])
#
name: Haskell-CI
on:
  - push
  - pull_request
jobs:
  linux:
    name: Haskell-CI Linux
    runs-on: ubuntu-18.04
    container:
      image: buildpack-deps:bionic
    strategy:
      matrix:
        include:
          - ghc: 8.10.1
          - ghc: 8.8.3
          - ghc: 8.6.5
          - ghc: 8.4.4
          - ghc: 8.2.2
          - ghc: 8.0.2
      fail-fast: false
    steps:
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common
          apt-add-repository -y 'ppa:hvr/ghc'
          apt-get update
          apt-get install -y ghc-$GHC_VERSION cabal-install-3.2
        env:
          GHC_VERSION: ${{ matrix.ghc }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> $GITHUB_ENV
          echo "CABAL_DIR=$HOME/.cabal" >> $GITHUB_ENV
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> $GITHUB_ENV
          HC=/opt/ghc/$GHC_VERSION/bin/ghc
          echo "HC=$HC" >> $GITHUB_ENV
          echo "HCPKG=/opt/ghc/$GHC_VERSION/bin/ghc-pkg" >> $GITHUB_ENV
          echo "HADDOCK=/opt/ghc/$GHC_VERSION/bin/haddock" >> $GITHUB_ENV
          echo "CABAL=/opt/cabal/3.2/bin/cabal -vnormal+nowrap" >> $GITHUB_ENV
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> $GITHUB_ENV
          echo "ARG_TESTS=--enable-tests" >> $GITHUB_ENV
          echo "ARG_BENCH=--enable-benchmarks" >> $GITHUB_ENV
          echo "ARG_COMPILER=--ghc --with-compiler=/opt/ghc/$GHC_VERSION/bin/ghc" >> $GITHUB_ENV
          echo "GHCJSARITH=0" >> $GITHUB_ENV
        env:
          GHC_VERSION: ${{ matrix.ghc }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: always
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.6.2.0/cabal-plan-0.6.2.0-x86_64-linux.xz > cabal-plan.xz
          echo 'de73600b1836d3f55e32d80385acc055fd97f60eaa0ab68a755302685f5d81bc  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: source
      - name: sdist
        run: |
          mkdir -p sdist
          cd source || false
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_singletons="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/singletons-[0-9.]*')"
          echo "PKGDIR_singletons=${PKGDIR_singletons}" >> $GITHUB_ENV
          PKGDIR_singletons_th="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/singletons-th-[0-9.]*')"
          echo "PKGDIR_singletons_th=${PKGDIR_singletons_th}" >> $GITHUB_ENV
          PKGDIR_singletons_base="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/singletons-base-[0-9.]*')"
          echo "PKGDIR_singletons_base=${PKGDIR_singletons_base}" >> $GITHUB_ENV
          touch cabal.project
          touch cabal.project.local
          echo "packages: ${PKGDIR_singletons}" >> cabal.project
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then echo "packages: ${PKGDIR_singletons_th}" >> cabal.project ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then echo "packages: ${PKGDIR_singletons_base}" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "package singletons" >> cabal.project ; fi
          if [ $((GHCJSARITH || ! GHCJSARITH && HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then echo "package singletons-th" >> cabal.project ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then echo "package singletons-base" >> cabal.project ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          cat >> cabal.project <<EOF
          source-repository-package
            type:     git
            location: https://github.com/goldfirere/th-desugar
            tag:      ca761285741c16c704a4044f551faf4292432d6a

          package th-desugar
            tests:      False
            benchmarks: False
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: $_ installed\n" unless /^(singletons|singletons-base|singletons-th)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all
      - name: tests
        run: |
          if [ $((! GHCJSARITH)) -ne 0 ] ; then $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct ; fi
      - name: cabal check
        run: |
          cd ${PKGDIR_singletons} || false
          ${CABAL} -vnormal check
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then cd ${PKGDIR_singletons_th} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then cd ${PKGDIR_singletons_base} || false ; fi
          if [ $((! GHCJSARITH && HCNUMVER >= 81000)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
      - name: haddock
        run: |
          if [ $((! GHCJSARITH)) -ne 0 ] ; then $CABAL v2-haddock $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all ; fi
