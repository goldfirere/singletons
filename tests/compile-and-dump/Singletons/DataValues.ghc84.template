Singletons/DataValues.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| pr = Pair (Succ Zero) ([Zero])
          complex = Pair (Pair (Just Zero) Zero) False
          tuple = (False, Just Zero, True)
          aList = [Zero, Succ Zero, Succ (Succ Zero)]
          
          data Pair a b
            = Pair a b
            deriving Show |]
  ======>
    data Pair a b
      = Pair a b
      deriving Show
    pr = (Pair (Succ Zero)) [Zero]
    complex = (Pair ((Pair (Just Zero)) Zero)) False
    tuple = (False, Just Zero, True)
    aList = [Zero, Succ Zero, Succ (Succ Zero)]
    type PairSym2 (t :: a0123456789876543210) (t :: b0123456789876543210) =
        Pair t t
    instance SuppressUnusedWarnings PairSym1 where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) PairSym1KindInference) GHC.Tuple.())
    data PairSym1 (l :: a0123456789876543210) (l :: TyFun b0123456789876543210 (Pair a0123456789876543210 b0123456789876543210)) :: GHC.Types.Type
      where
        PairSym1KindInference :: forall l l arg.
                                 SameKind (Apply (PairSym1 l) arg) (PairSym2 l arg) => PairSym1 l l
    type instance Apply (PairSym1 l) l = Pair l l
    instance SuppressUnusedWarnings PairSym0 where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) PairSym0KindInference) GHC.Tuple.())
    data PairSym0 (l :: TyFun a0123456789876543210 ((~>) b0123456789876543210 (Pair a0123456789876543210 b0123456789876543210))) :: GHC.Types.Type
      where
        PairSym0KindInference :: forall l arg.
                                 SameKind (Apply PairSym0 arg) (PairSym1 arg) => PairSym0 l
    type instance Apply PairSym0 l = PairSym1 l
    type AListSym0 = AList
    type TupleSym0 = Tuple
    type ComplexSym0 = Complex
    type PrSym0 = Pr
    type family AList where
      AList = Apply (Apply (:@#@$) ZeroSym0) (Apply (Apply (:@#@$) (Apply SuccSym0 ZeroSym0)) (Apply (Apply (:@#@$) (Apply SuccSym0 (Apply SuccSym0 ZeroSym0))) '[]))
    type family Tuple where
      Tuple = Apply (Apply (Apply Tuple3Sym0 FalseSym0) (Apply JustSym0 ZeroSym0)) TrueSym0
    type family Complex where
      Complex = Apply (Apply PairSym0 (Apply (Apply PairSym0 (Apply JustSym0 ZeroSym0)) ZeroSym0)) FalseSym0
    type family Pr where
      Pr = Apply (Apply PairSym0 (Apply SuccSym0 ZeroSym0)) (Apply (Apply (:@#@$) ZeroSym0) '[])
    type family ShowsPrec_0123456789876543210 (a :: GHC.Types.Nat) (a :: Pair a b) (a :: Symbol) :: Symbol where
      ShowsPrec_0123456789876543210 p_0123456789876543210 (Pair arg_0123456789876543210 arg_0123456789876543210) a_0123456789876543210 = Apply (Apply (Apply ShowParenSym0 (Apply (Apply (>@#@$) p_0123456789876543210) (FromInteger 10))) (Apply (Apply (.@#@$) (Apply ShowStringSym0 "Pair ")) (Apply (Apply (.@#@$) (Apply (Apply ShowsPrecSym0 (FromInteger 11)) arg_0123456789876543210)) (Apply (Apply (.@#@$) ShowSpaceSym0) (Apply (Apply ShowsPrecSym0 (FromInteger 11)) arg_0123456789876543210))))) a_0123456789876543210
    type ShowsPrec_0123456789876543210Sym3 (t :: GHC.Types.Nat) (t :: Pair a0123456789876543210 b0123456789876543210) (t :: Symbol) =
        ShowsPrec_0123456789876543210 t t t
    instance SuppressUnusedWarnings ShowsPrec_0123456789876543210Sym2 where
      suppressUnusedWarnings
        = snd
            ((GHC.Tuple.(,) ShowsPrec_0123456789876543210Sym2KindInference)
               GHC.Tuple.())
    data ShowsPrec_0123456789876543210Sym2 (l :: GHC.Types.Nat) (l :: Pair a0123456789876543210 b0123456789876543210) (l :: TyFun Symbol Symbol) :: GHC.Types.Type
      where
        ShowsPrec_0123456789876543210Sym2KindInference :: forall l l l arg.
                                                          SameKind (Apply (ShowsPrec_0123456789876543210Sym2 l l) arg) (ShowsPrec_0123456789876543210Sym3 l l arg) =>
                                                          ShowsPrec_0123456789876543210Sym2 l l l
    type instance Apply (ShowsPrec_0123456789876543210Sym2 l l) l = ShowsPrec_0123456789876543210 l l l
    instance SuppressUnusedWarnings ShowsPrec_0123456789876543210Sym1 where
      suppressUnusedWarnings
        = snd
            ((GHC.Tuple.(,) ShowsPrec_0123456789876543210Sym1KindInference)
               GHC.Tuple.())
    data ShowsPrec_0123456789876543210Sym1 (l :: GHC.Types.Nat) (l :: TyFun (Pair a0123456789876543210 b0123456789876543210) ((~>) Symbol Symbol)) :: GHC.Types.Type
      where
        ShowsPrec_0123456789876543210Sym1KindInference :: forall l l arg.
                                                          SameKind (Apply (ShowsPrec_0123456789876543210Sym1 l) arg) (ShowsPrec_0123456789876543210Sym2 l arg) =>
                                                          ShowsPrec_0123456789876543210Sym1 l l
    type instance Apply (ShowsPrec_0123456789876543210Sym1 l) l = ShowsPrec_0123456789876543210Sym2 l l
    instance SuppressUnusedWarnings ShowsPrec_0123456789876543210Sym0 where
      suppressUnusedWarnings
        = snd
            ((GHC.Tuple.(,) ShowsPrec_0123456789876543210Sym0KindInference)
               GHC.Tuple.())
    data ShowsPrec_0123456789876543210Sym0 (l :: TyFun GHC.Types.Nat ((~>) (Pair a0123456789876543210 b0123456789876543210) ((~>) Symbol Symbol))) :: GHC.Types.Type
      where
        ShowsPrec_0123456789876543210Sym0KindInference :: forall l arg.
                                                          SameKind (Apply ShowsPrec_0123456789876543210Sym0 arg) (ShowsPrec_0123456789876543210Sym1 arg) =>
                                                          ShowsPrec_0123456789876543210Sym0 l
    type instance Apply ShowsPrec_0123456789876543210Sym0 l = ShowsPrec_0123456789876543210Sym1 l
    instance PShow (Pair a b) where
      type ShowsPrec a a a = Apply (Apply (Apply ShowsPrec_0123456789876543210Sym0 a) a) a
    sAList :: Sing AListSym0
    sTuple :: Sing TupleSym0
    sComplex :: Sing ComplexSym0
    sPr :: Sing PrSym0
    sAList
      = (applySing ((applySing ((singFun2 @(:@#@$)) SCons)) SZero))
          ((applySing
              ((applySing ((singFun2 @(:@#@$)) SCons))
                 ((applySing ((singFun1 @SuccSym0) SSucc)) SZero)))
             ((applySing
                 ((applySing ((singFun2 @(:@#@$)) SCons))
                    ((applySing ((singFun1 @SuccSym0) SSucc))
                       ((applySing ((singFun1 @SuccSym0) SSucc)) SZero))))
                SNil))
    sTuple
      = (applySing
           ((applySing ((applySing ((singFun3 @Tuple3Sym0) STuple3)) SFalse))
              ((applySing ((singFun1 @JustSym0) SJust)) SZero)))
          STrue
    sComplex
      = (applySing
           ((applySing ((singFun2 @PairSym0) SPair))
              ((applySing
                  ((applySing ((singFun2 @PairSym0) SPair))
                     ((applySing ((singFun1 @JustSym0) SJust)) SZero)))
                 SZero)))
          SFalse
    sPr
      = (applySing
           ((applySing ((singFun2 @PairSym0) SPair))
              ((applySing ((singFun1 @SuccSym0) SSucc)) SZero)))
          ((applySing ((applySing ((singFun2 @(:@#@$)) SCons)) SZero)) SNil)
    data instance Sing :: Pair a b -> GHC.Types.Type :: Pair a b
                                                        -> GHC.Types.Type
      where
        SPair :: forall a b (n :: a) (n :: b).
                 (Sing (n :: a)) -> (Sing (n :: b)) -> Sing (Pair n n)
    type SPair = (Sing :: Pair a b -> GHC.Types.Type)
    instance (SingKind a, SingKind b) => SingKind (Pair a b) where
      type Demote (Pair a b) = Pair (Demote a) (Demote b)
      fromSing (SPair b b) = (Pair (fromSing b)) (fromSing b)
      toSing (Pair (b :: Demote a) (b :: Demote b))
        = case
              (GHC.Tuple.(,) (toSing b :: SomeSing a)) (toSing b :: SomeSing b)
          of {
            GHC.Tuple.(,) (SomeSing c) (SomeSing c) -> SomeSing ((SPair c) c) }
    instance (SShow a, SShow b) => SShow (Pair a b) where
      sShowsPrec ::
        forall (t1 :: GHC.Types.Nat) (t2 :: Pair a b) (t3 :: Symbol).
        Sing t1
        -> Sing t2
           -> Sing t3
              -> Sing (Apply (Apply (Apply (ShowsPrecSym0 :: TyFun GHC.Types.Nat ((~>) (Pair a b) ((~>) Symbol Symbol))
                                                             -> GHC.Types.Type) t1) t2) t3)
      sShowsPrec
        (sP_0123456789876543210 :: Sing p_0123456789876543210)
        (SPair (sArg_0123456789876543210 :: Sing arg_0123456789876543210)
               (sArg_0123456789876543210 :: Sing arg_0123456789876543210))
        (sA_0123456789876543210 :: Sing a_0123456789876543210)
        = (applySing
             ((applySing
                 ((applySing ((singFun3 @ShowParenSym0) sShowParen))
                    ((applySing
                        ((applySing ((singFun2 @(>@#@$)) (%>))) sP_0123456789876543210))
                       (sFromInteger (sing :: Sing 10)))))
                ((applySing
                    ((applySing ((singFun3 @(.@#@$)) (%.)))
                       ((applySing ((singFun2 @ShowStringSym0) sShowString))
                          (sing :: Sing "Pair "))))
                   ((applySing
                       ((applySing ((singFun3 @(.@#@$)) (%.)))
                          ((applySing
                              ((applySing ((singFun3 @ShowsPrecSym0) sShowsPrec))
                                 (sFromInteger (sing :: Sing 11))))
                             sArg_0123456789876543210)))
                      ((applySing
                          ((applySing ((singFun3 @(.@#@$)) (%.)))
                             ((singFun1 @ShowSpaceSym0) sShowSpace)))
                         ((applySing
                             ((applySing ((singFun3 @ShowsPrecSym0) sShowsPrec))
                                (sFromInteger (sing :: Sing 11))))
                            sArg_0123456789876543210))))))
            sA_0123456789876543210
    instance (Data.Singletons.ShowSing.ShowSing a,
              Data.Singletons.ShowSing.ShowSing b) =>
             Data.Singletons.ShowSing.ShowSing (Pair a b) where
      Data.Singletons.ShowSing.showsSingPrec
        p_0123456789876543210
        (SPair arg_0123456789876543210 arg_0123456789876543210)
        = (showParen (((>) p_0123456789876543210) 10))
            (((.) (showString "SPair "))
               (((.)
                   ((Data.Singletons.ShowSing.showsSingPrec 11)
                      arg_0123456789876543210))
                  (((.) GHC.Show.showSpace)
                     ((Data.Singletons.ShowSing.showsSingPrec 11)
                        arg_0123456789876543210))))
    instance (Data.Singletons.ShowSing.ShowSing a,
              Data.Singletons.ShowSing.ShowSing b) =>
             Show (Sing (z :: Pair a b)) where
      showsPrec = Data.Singletons.ShowSing.showsSingPrec
    instance (SingI n, SingI n) => SingI (Pair (n :: a) (n :: b)) where
      sing = (SPair sing) sing
    instance SingI (PairSym0 :: (~>) a ((~>) b (Pair a b))) where
      sing = (singFun2 @PairSym0) SPair
    instance SingI (TyCon2 Pair :: (~>) a ((~>) b (Pair a b))) where
      sing = (singFun2 @(TyCon2 Pair)) SPair
    instance SingI d =>
             SingI (PairSym1 (d :: a) :: (~>) b (Pair a b)) where
      sing = (singFun1 @(PairSym1 (d :: a))) (SPair (sing @_ @d))
    instance SingI d =>
             SingI (TyCon1 (Pair (d :: a)) :: (~>) b (Pair a b)) where
      sing = (singFun1 @(TyCon1 (Pair (d :: a)))) (SPair (sing @_ @d))
