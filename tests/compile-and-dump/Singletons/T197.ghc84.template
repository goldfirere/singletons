Singletons/T197.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| infixl 5 $$:
          
          ($$:) :: Bool -> Bool -> Bool
          _ $$: _ = False |]
  ======>
    infixl 5 $$:
    ($$:) :: Bool -> Bool -> Bool
    ($$:) _ _ = False
    type ($$:@#@$$$) (t :: Bool) (t :: Bool) = ($$:) t t
    instance SuppressUnusedWarnings ($$:@#@$$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (:$$:@#@$$###)) GHC.Tuple.())
    data ($$:@#@$$) (l :: Bool) (l :: TyFun Bool Bool) :: GHC.Types.Type
      where
        (:$$:@#@$$###) :: forall l l arg.
                          SameKind (Apply (($$:@#@$$) l) arg) (($$:@#@$$$) l arg) =>
                          ($$:@#@$$) l l
    type instance Apply (($$:@#@$$) l) l = ($$:) l l
    infixl 5 $$:@#@$$
    instance SuppressUnusedWarnings ($$:@#@$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (:$$:@#@$###)) GHC.Tuple.())
    data ($$:@#@$) (l :: TyFun Bool ((~>) Bool Bool)) :: GHC.Types.Type
      where
        (:$$:@#@$###) :: forall l arg.
                         SameKind (Apply ($$:@#@$) arg) (($$:@#@$$) arg) => ($$:@#@$) l
    type instance Apply ($$:@#@$) l = ($$:@#@$$) l
    infixl 5 $$:@#@$
    type family ($$:) (a :: Bool) (a :: Bool) :: Bool where
      ($$:) _ _ = FalseSym0
    infixl 5 %$$:
    (%$$:) ::
      forall (t :: Bool) (t :: Bool).
      Sing t -> Sing t -> Sing (Apply (Apply ($$:@#@$) t) t :: Bool)
    (%$$:) _ _ = SFalse
    instance SingI (($$:@#@$) :: (~>) Bool ((~>) Bool Bool)) where
      sing = (singFun2 @($$:@#@$)) (%$$:)
    instance SingI d =>
             SingI (($$:@#@$$) (d :: Bool) :: (~>) Bool Bool) where
      sing = (singFun1 @(($$:@#@$$) (d :: Bool))) ((%$$:) (sing @_ @d))
