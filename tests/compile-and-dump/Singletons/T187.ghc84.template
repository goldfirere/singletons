Singletons/T187.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| data Empty
          
          deriving instance Ord Empty
          deriving instance Eq Empty |]
  ======>
    data Empty
    deriving instance Eq Empty
    deriving instance Ord Empty
    type family Compare_0123456789876543210 (a :: Empty) (a :: Empty) :: Ordering where
      Compare_0123456789876543210 _ _ = EQSym0
    type Compare_0123456789876543210Sym2 (a0123456789876543210 :: Empty) (a0123456789876543210 :: Empty) =
        Compare_0123456789876543210 a0123456789876543210 a0123456789876543210
    instance SuppressUnusedWarnings (Compare_0123456789876543210Sym1 a0123456789876543210) where
      suppressUnusedWarnings
        = snd
            ((GHC.Tuple.(,) Compare_0123456789876543210Sym1KindInference)
               GHC.Tuple.())
    data Compare_0123456789876543210Sym1 (a0123456789876543210 :: Empty) :: (~>) Empty Ordering
      where
        Compare_0123456789876543210Sym1KindInference :: forall a0123456789876543210
                                                               a0123456789876543210
                                                               arg.
                                                        SameKind (Apply (Compare_0123456789876543210Sym1 a0123456789876543210) arg) (Compare_0123456789876543210Sym2 a0123456789876543210 arg) =>
                                                        Compare_0123456789876543210Sym1 a0123456789876543210 a0123456789876543210
    type instance Apply (Compare_0123456789876543210Sym1 a0123456789876543210) a0123456789876543210 = Compare_0123456789876543210 a0123456789876543210 a0123456789876543210
    instance SuppressUnusedWarnings Compare_0123456789876543210Sym0 where
      suppressUnusedWarnings
        = snd
            ((GHC.Tuple.(,) Compare_0123456789876543210Sym0KindInference)
               GHC.Tuple.())
    data Compare_0123456789876543210Sym0 :: (~>) Empty ((~>) Empty Ordering)
      where
        Compare_0123456789876543210Sym0KindInference :: forall a0123456789876543210
                                                               arg.
                                                        SameKind (Apply Compare_0123456789876543210Sym0 arg) (Compare_0123456789876543210Sym1 arg) =>
                                                        Compare_0123456789876543210Sym0 a0123456789876543210
    type instance Apply Compare_0123456789876543210Sym0 a0123456789876543210 = Compare_0123456789876543210Sym1 a0123456789876543210
    instance POrd Empty where
      type Compare a a = Apply (Apply Compare_0123456789876543210Sym0 a) a
    type family Equals_0123456789876543210 (a :: Empty) (b :: Empty) :: Bool where
      Equals_0123456789876543210 (_ :: Empty) (_ :: Empty) = TrueSym0
    instance PEq Empty where
      type (==) a b = Equals_0123456789876543210 a b
    data instance Sing :: Empty -> GHC.Types.Type :: Empty
                                                     -> GHC.Types.Type
    type SEmpty = (Sing :: Empty -> GHC.Types.Type)
    instance SingKind Empty where
      type Demote Empty = Empty
      fromSing x = case x of
      toSing x = SomeSing (case x of)
    instance SOrd Empty where
      sCompare ::
        forall (t1 :: Empty) (t2 :: Empty).
        Sing t1
        -> Sing t2
           -> Sing (Apply (Apply (CompareSym0 :: TyFun Empty ((~>) Empty Ordering)
                                                 -> GHC.Types.Type) t1) t2)
      sCompare _ _ = SEQ
    instance SEq Empty where
      (%==) _ _ = STrue
    instance SDecide Empty where
      (%~) x _ = Proved (case x of)
