Singletons/T197b.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| infixr 9 `Pair`, `MkPair`
          
          data a :*: b = a :*: b
          data Pair a b = MkPair a b |]
  ======>
    data (:*:) a b = a :*: b
    data Pair a b = MkPair a b
    infixr 9 `Pair`
    infixr 9 `MkPair`
    type (:*:@#@$$$) (t :: a0123456789876543210) (t :: b0123456789876543210) =
        (:*:) t t
    instance SuppressUnusedWarnings (:*:@#@$$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (::*:@#@$$###)) GHC.Tuple.())
    data (:*:@#@$$) (l :: a0123456789876543210) (l :: TyFun b0123456789876543210 ((:*:) a0123456789876543210 b0123456789876543210)) :: GHC.Types.Type
      where
        (::*:@#@$$###) :: forall l l arg.
                          SameKind (Apply ((:*:@#@$$) l) arg) ((:*:@#@$$$) l arg) =>
                          (:*:@#@$$) l l
    type instance Apply ((:*:@#@$$) l) l = (:*:) l l
    instance SuppressUnusedWarnings (:*:@#@$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (::*:@#@$###)) GHC.Tuple.())
    data (:*:@#@$) (l :: TyFun a0123456789876543210 ((~>) b0123456789876543210 ((:*:) a0123456789876543210 b0123456789876543210))) :: GHC.Types.Type
      where
        (::*:@#@$###) :: forall l arg.
                         SameKind (Apply (:*:@#@$) arg) ((:*:@#@$$) arg) => (:*:@#@$) l
    type instance Apply (:*:@#@$) l = (:*:@#@$$) l
    type MkPairSym2 (t :: a0123456789876543210) (t :: b0123456789876543210) =
        MkPair t t
    instance SuppressUnusedWarnings MkPairSym1 where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) MkPairSym1KindInference) GHC.Tuple.())
    data MkPairSym1 (l :: a0123456789876543210) (l :: TyFun b0123456789876543210 (Pair a0123456789876543210 b0123456789876543210)) :: GHC.Types.Type
      where
        MkPairSym1KindInference :: forall l l arg.
                                   SameKind (Apply (MkPairSym1 l) arg) (MkPairSym2 l arg) =>
                                   MkPairSym1 l l
    type instance Apply (MkPairSym1 l) l = MkPair l l
    infixr 9 `MkPairSym1`
    instance SuppressUnusedWarnings MkPairSym0 where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) MkPairSym0KindInference) GHC.Tuple.())
    data MkPairSym0 (l :: TyFun a0123456789876543210 ((~>) b0123456789876543210 (Pair a0123456789876543210 b0123456789876543210))) :: GHC.Types.Type
      where
        MkPairSym0KindInference :: forall l arg.
                                   SameKind (Apply MkPairSym0 arg) (MkPairSym1 arg) => MkPairSym0 l
    type instance Apply MkPairSym0 l = MkPairSym1 l
    infixr 9 `MkPairSym0`
    infixr 9 `SPair`
    infixr 9 `SMkPair`
    data instance Sing :: (:*:) a b -> GHC.Types.Type :: (:*:) a b
                                                         -> GHC.Types.Type
      where
        (:%*:) :: forall a b (n :: a) (n :: b).
                  (Sing (n :: a)) -> (Sing (n :: b)) -> Sing ((:*:) n n)
    type %:*: = (Sing :: (:*:) a b -> GHC.Types.Type)
    instance (SingKind a, SingKind b) => SingKind ((:*:) a b) where
      type Demote ((:*:) a b) = (:*:) (Demote a) (Demote b)
      fromSing ((:%*:) b b) = ((:*:) (fromSing b)) (fromSing b)
      toSing ((:*:) (b :: Demote a) (b :: Demote b))
        = case
              (GHC.Tuple.(,) (toSing b :: SomeSing a)) (toSing b :: SomeSing b)
          of {
            GHC.Tuple.(,) (SomeSing c) (SomeSing c)
              -> SomeSing (((:%*:) c) c) }
    data instance Sing :: Pair a b -> GHC.Types.Type :: Pair a b
                                                        -> GHC.Types.Type
      where
        SMkPair :: forall a b (n :: a) (n :: b).
                   (Sing (n :: a)) -> (Sing (n :: b)) -> Sing (MkPair n n)
    type SPair = (Sing :: Pair a b -> GHC.Types.Type)
    instance (SingKind a, SingKind b) => SingKind (Pair a b) where
      type Demote (Pair a b) = Pair (Demote a) (Demote b)
      fromSing (SMkPair b b) = (MkPair (fromSing b)) (fromSing b)
      toSing (MkPair (b :: Demote a) (b :: Demote b))
        = case
              (GHC.Tuple.(,) (toSing b :: SomeSing a)) (toSing b :: SomeSing b)
          of {
            GHC.Tuple.(,) (SomeSing c) (SomeSing c)
              -> SomeSing ((SMkPair c) c) }
    instance (SingI n, SingI n) =>
             SingI ((:*:) (n :: a) (n :: b)) where
      sing = ((:%*:) sing) sing
    instance SingI ((:*:@#@$) :: (~>) a ((~>) b ((:*:) a b))) where
      sing = (singFun2 @(:*:@#@$)) (:%*:)
    instance SingI (TyCon2 (:*:) :: (~>) a ((~>) b ((:*:) a b))) where
      sing = (singFun2 @(TyCon2 (:*:))) (:%*:)
    instance SingI d =>
             SingI ((:*:@#@$$) (d :: a) :: (~>) b ((:*:) a b)) where
      sing = (singFun1 @((:*:@#@$$) (d :: a))) ((:%*:) (sing @_ @d))
    instance SingI d =>
             SingI (TyCon1 ((:*:) (d :: a)) :: (~>) b ((:*:) a b)) where
      sing = (singFun1 @(TyCon1 ((:*:) (d :: a)))) ((:%*:) (sing @_ @d))
    instance (SingI n, SingI n) =>
             SingI (MkPair (n :: a) (n :: b)) where
      sing = (SMkPair sing) sing
    instance SingI (MkPairSym0 :: (~>) a ((~>) b (Pair a b))) where
      sing = (singFun2 @MkPairSym0) SMkPair
    instance SingI (TyCon2 MkPair :: (~>) a ((~>) b (Pair a b))) where
      sing = (singFun2 @(TyCon2 MkPair)) SMkPair
    instance SingI d =>
             SingI (MkPairSym1 (d :: a) :: (~>) b (Pair a b)) where
      sing = (singFun1 @(MkPairSym1 (d :: a))) (SMkPair (sing @_ @d))
    instance SingI d =>
             SingI (TyCon1 (MkPair (d :: a)) :: (~>) b (Pair a b)) where
      sing
        = (singFun1 @(TyCon1 (MkPair (d :: a)))) (SMkPair (sing @_ @d))
