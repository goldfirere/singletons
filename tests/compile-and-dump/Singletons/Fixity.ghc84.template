Singletons/Fixity.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| infix 4 ====
          infix 4 <=>
          
          (====) :: a -> a -> a
          a ==== _ = a
          
          class MyOrd a where
            (<=>) :: a -> a -> Ordering
            infix 4 <=> |]
  ======>
    class MyOrd a where
      (<=>) :: a -> a -> Ordering
    infix 4 <=>
    (====) :: a -> a -> a
    (====) a _ = a
    infix 4 ====
    type (====@#@$$$) (t :: a0123456789876543210) (t :: a0123456789876543210) =
        (====) t t
    instance SuppressUnusedWarnings (====@#@$$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (:====@#@$$###)) GHC.Tuple.())
    data (====@#@$$) (l :: a0123456789876543210) (l :: TyFun a0123456789876543210 a0123456789876543210) :: GHC.Types.Type
      where
        (:====@#@$$###) :: forall l l arg.
                           SameKind (Apply ((====@#@$$) l) arg) ((====@#@$$$) l arg) =>
                           (====@#@$$) l l
    type instance Apply ((====@#@$$) l) l = (====) l l
    infix 4 ====@#@$$
    instance SuppressUnusedWarnings (====@#@$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (:====@#@$###)) GHC.Tuple.())
    data (====@#@$) (l :: TyFun a0123456789876543210 ((~>) a0123456789876543210 a0123456789876543210)) :: GHC.Types.Type
      where
        (:====@#@$###) :: forall l arg.
                          SameKind (Apply (====@#@$) arg) ((====@#@$$) arg) => (====@#@$) l
    type instance Apply (====@#@$) l = (====@#@$$) l
    infix 4 ====@#@$
    type family (====) (a :: a) (a :: a) :: a where
      (====) a _ = a
    type (<=>@#@$$$) (t :: a0123456789876543210) (t :: a0123456789876543210) =
        (<=>) t t
    instance SuppressUnusedWarnings (<=>@#@$$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (:<=>@#@$$###)) GHC.Tuple.())
    data (<=>@#@$$) (l :: a0123456789876543210) (l :: TyFun a0123456789876543210 Ordering) :: GHC.Types.Type
      where
        (:<=>@#@$$###) :: forall l l arg.
                          SameKind (Apply ((<=>@#@$$) l) arg) ((<=>@#@$$$) l arg) =>
                          (<=>@#@$$) l l
    type instance Apply ((<=>@#@$$) l) l = (<=>) l l
    infix 4 <=>@#@$$
    instance SuppressUnusedWarnings (<=>@#@$) where
      suppressUnusedWarnings
        = snd ((GHC.Tuple.(,) (:<=>@#@$###)) GHC.Tuple.())
    data (<=>@#@$) (l :: TyFun a0123456789876543210 ((~>) a0123456789876543210 Ordering)) :: GHC.Types.Type
      where
        (:<=>@#@$###) :: forall l arg.
                         SameKind (Apply (<=>@#@$) arg) ((<=>@#@$$) arg) => (<=>@#@$) l
    type instance Apply (<=>@#@$) l = (<=>@#@$$) l
    infix 4 <=>@#@$
    class PMyOrd (a :: GHC.Types.Type) where
      type (<=>) (arg :: a) (arg :: a) :: Ordering
    infix 4 %====
    infix 4 %<=>
    (%====) ::
      forall a (t :: a) (t :: a).
      Sing t -> Sing t -> Sing (Apply (Apply (====@#@$) t) t :: a)
    (%====) (sA :: Sing a) _ = sA
    instance SingI ((====@#@$) :: (~>) a ((~>) a a)) where
      sing = (singFun2 @(====@#@$)) (%====)
    instance SingI d => SingI ((====@#@$$) (d :: a) :: (~>) a a) where
      sing = (singFun1 @((====@#@$$) (d :: a))) ((%====) (sing @_ @d))
    class SMyOrd a where
      (%<=>) ::
        forall (t :: a) (t :: a).
        Sing t -> Sing t -> Sing (Apply (Apply (<=>@#@$) t) t :: Ordering)
    instance SMyOrd a =>
             SingI ((<=>@#@$) :: (~>) a ((~>) a Ordering)) where
      sing = (singFun2 @(<=>@#@$)) (%<=>)
    instance (SMyOrd a, SingI d) =>
             SingI ((<=>@#@$$) (d :: a) :: (~>) a Ordering) where
      sing = (singFun1 @((<=>@#@$$) (d :: a))) ((%<=>) (sing @_ @d))
