Singletons/T136b.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| class C a where
            meth :: a -> a |]
  ======>
    class C a where
      meth :: a -> a
    type MethSym0 :: forall a. (~>) a a
    data MethSym0 :: (~>) a a
      where
        MethSym0KindInference :: SameKind (Apply MethSym0 arg) (MethSym1 arg) =>
                                 MethSym0 a0123456789876543210
    type instance Apply @a @a MethSym0 a0123456789876543210 = Meth a0123456789876543210
    instance SuppressUnusedWarnings MethSym0 where
      suppressUnusedWarnings = snd ((,) MethSym0KindInference ())
    type MethSym1 :: forall a. a -> a
    type family MethSym1 @a (a0123456789876543210 :: a) :: a where
      MethSym1 a0123456789876543210 = Meth a0123456789876543210
    class PC a where
      type family Meth (arg :: a) :: a
    class SC a where
      sMeth :: (forall (t :: a). Sing t -> Sing (Meth t :: a) :: Type)
    instance SC a => SingI (MethSym0 :: (~>) a a) where
      sing = singFun1 @MethSym0 sMeth
Singletons/T136b.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| instance C Bool where
            meth = not |]
  ======>
    instance C Bool where
      meth = not
    type Meth_0123456789876543210 :: Bool -> Bool
    type family Meth_0123456789876543210 (a :: Bool) :: Bool where
      Meth_0123456789876543210 a_0123456789876543210 = Apply NotSym0 a_0123456789876543210
    instance PC Bool where
      type Meth a = Meth_0123456789876543210 a
    instance SC Bool where
      sMeth (sA_0123456789876543210 :: Sing a_0123456789876543210)
        = applySing (singFun1 @NotSym0 sNot) sA_0123456789876543210
