Singletons/T287.hs:(0,0)-(0,0): Splicing declarations
    singletons
      [d| class S a where
            (<<>>) :: a -> a -> a
          
          instance S b => S (a -> b) where
            f <<>> g = \ x -> f x <<>> g x |]
  ======>
    class S a where
      (<<>>) :: a -> a -> a
    instance S b => S (a -> b) where
      (<<>>) f g = \ x -> (f x <<>> g x)
    type (<<>>@#@$) :: forall a. (~>) a ((~>) a a)
    data (<<>>@#@$) :: (~>) a ((~>) a a)
      where
        (:<<>>@#@$###) :: SameKind (Apply (<<>>@#@$) arg) ((<<>>@#@$$) arg) =>
                          (<<>>@#@$) a0123456789876543210
    type instance Apply @a @((~>) a a) (<<>>@#@$) a0123456789876543210 = (<<>>@#@$$) a0123456789876543210
    instance SuppressUnusedWarnings (<<>>@#@$) where
      suppressUnusedWarnings = snd ((,) (:<<>>@#@$###) ())
    type (<<>>@#@$$) :: forall a. a -> (~>) a a
    data (<<>>@#@$$) (a0123456789876543210 :: a) :: (~>) a a
      where
        (:<<>>@#@$$###) :: SameKind (Apply ((<<>>@#@$$) a0123456789876543210) arg) ((<<>>@#@$$$) a0123456789876543210 arg) =>
                           (<<>>@#@$$) a0123456789876543210 a0123456789876543210
    type instance Apply @a @a ((<<>>@#@$$) a0123456789876543210) a0123456789876543210 = (<<>>) a0123456789876543210 a0123456789876543210
    instance SuppressUnusedWarnings ((<<>>@#@$$) a0123456789876543210) where
      suppressUnusedWarnings = snd ((,) (:<<>>@#@$$###) ())
    type (<<>>@#@$$$) :: forall a. a -> a -> a
    type family (<<>>@#@$$$) @a (a0123456789876543210 :: a) (a0123456789876543210 :: a) :: a where
      (<<>>@#@$$$) a0123456789876543210 a0123456789876543210 = (<<>>) a0123456789876543210 a0123456789876543210
    class PS a where
      type family (<<>>) (arg :: a) (arg :: a) :: a
    type family Lambda_0123456789876543210 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x where
      Lambda_0123456789876543210 a b f g x = Apply (Apply (<<>>@#@$) (Apply f x)) (Apply g x)
    data Lambda_0123456789876543210Sym0 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x0123456789876543210
      where
        Lambda_0123456789876543210Sym0KindInference :: SameKind (Apply (Lambda_0123456789876543210Sym0 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210) arg) (Lambda_0123456789876543210Sym1 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 arg) =>
                                                       Lambda_0123456789876543210Sym0 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x0123456789876543210
    type instance Apply @_ @_ (Lambda_0123456789876543210Sym0 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210) x0123456789876543210 = Lambda_0123456789876543210 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x0123456789876543210
    instance SuppressUnusedWarnings (Lambda_0123456789876543210Sym0 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210) where
      suppressUnusedWarnings
        = snd ((,) Lambda_0123456789876543210Sym0KindInference ())
    type family Lambda_0123456789876543210Sym1 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x0123456789876543210 where
      Lambda_0123456789876543210Sym1 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x0123456789876543210 = Lambda_0123456789876543210 a0123456789876543210 b0123456789876543210 f0123456789876543210 g0123456789876543210 x0123456789876543210
    type TFHelper_0123456789876543210 :: forall a b. (~>) a b
                                                     -> (~>) a b -> (~>) a b
    type family TFHelper_0123456789876543210 @a @b (a :: (~>) a b) (a :: (~>) a b) :: (~>) a b where
      TFHelper_0123456789876543210 @a @b (f :: (~>) a b) (g :: (~>) a b) = Lambda_0123456789876543210Sym0 a b f g
    instance PS ((~>) a b) where
      type (<<>>) a a = TFHelper_0123456789876543210 a a
    class SS a where
      (%<<>>) ::
        (forall (t :: a) (t :: a).
         Sing t
         -> Sing t -> Sing (Apply (Apply (<<>>@#@$) t) t :: a) :: Type)
    instance SS b => SS ((~>) a b) where
      (%<<>>) (sF :: Sing f) (sG :: Sing g)
        = singFun1
            @(Lambda_0123456789876543210Sym0 a b f g)
            (\ sX
               -> case sX of
                    (_ :: Sing x)
                      -> applySing
                           (applySing (singFun2 @(<<>>@#@$) (%<<>>)) (applySing sF sX))
                           (applySing sG sX))
    instance SS a => SingI ((<<>>@#@$) :: (~>) a ((~>) a a)) where
      sing = singFun2 @(<<>>@#@$) (%<<>>)
    instance (SS a, SingI d) =>
             SingI ((<<>>@#@$$) (d :: a) :: (~>) a a) where
      sing = singFun1 @((<<>>@#@$$) (d :: a)) ((%<<>>) (sing @d))
    instance SS a => SingI1 ((<<>>@#@$$) :: a -> (~>) a a) where
      liftSing (s :: Sing (d :: a))
        = singFun1 @((<<>>@#@$$) (d :: a)) ((%<<>>) s)
